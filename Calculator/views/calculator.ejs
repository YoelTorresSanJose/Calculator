<style>

  @font-face {
      font-family: 'Roboto', sans-serif;
      src: url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');

  }


  .botones {
      display: block;
      width: 70vw;
      padding-left: 38vw;
  }

  input {
      width: 50vw;
      border: 0;
      background-color: black;
      color: white;
      font-size: 15vh;
      text-align: end;
  }

  div {
      display: flex;
      place-self: center;
  }

   button {
      width: 15vh;
      height: 15vh;
      border-radius: 100%;
      font-size: 3em;
      margin: 0.3%;
  }

  .cero {
      width: 30vh;
      border-radius: 50vh;
      text-align: left;
      padding-left: 35px;
      padding-right: 100px;

  }

  .pantalla {
      background-color: black;
  }

  .pantalla-calculadora {
      background-color: white;
  }

  .calculadora {
      font-family: 'Open 24 Display St';
      display: flex;
      flex-direction: column;
      width: fit-content;
  }

  .pantalla {
      text-align: end;
      width: 60vh;
      overflow: hidden;
      place-self: center;
  }

  .ColorGris {
      background-color: rgb(255, 246, 246);
  }

  .ColorNaranja {
      background-color: rgb(255, 102, 0);
  }

  .ColorG {
      background-color: rgb(73, 73, 73);
      color: black;
      transition: all 0.2s ease-in-out;
  }

  .mogul {
      width: 100%;
  }
  .historial-content{
      display:block;
      position: absolute;
      left: 300px;
      margin-top: 10px
  }

</style>


<div class="calculadora">
  <div class="pantalla">
      <input type="text" class="mogul" id="display" disabled>
  </div>
  <div class="historial">
      <button onclick="mostrarHistorial()" style="font-size:25px; color:aqua"> 
         Historial
      </button>
      <div class="historial-content" id="historial-content"></div>
  </div>
  <div class="containerbtn">
  
      <div class="botones">


          <div class="botones-fx">
              <button class="ColorG" id="AC" onclick="borrarDisplay()">AC</button>
              <button class="ColorG" id="Parentheses" onclick="addParenthesesIzq()">(</button>
              <button class="ColorG" id="Parentheses" onclick="addParenthesesDer()">)</button>
              <button class="ColorNaranja" onclick="addToDisplay('/')">/</button>
          </div>

          <div class="botones-num">
              <button class="ColorGris" onclick="addToDisplay('7')">7</button>
              <button class="ColorGris" onclick="addToDisplay('8')">8</button>
              <button class="ColorGris" onclick="addToDisplay('9')">9</button>
              <button class="ColorNaranja" onclick="addToDisplay('*')">x</button>
          </div>

          <div class="botones-num">
              <button class="ColorGris" onclick="addToDisplay('4')">4</button>
              <button class="ColorGris" onclick="addToDisplay('5')">5</button>
              <button class="ColorGris" onclick="addToDisplay('6')">6</button>
              <button class="ColorNaranja" onclick="addToDisplay('-')">-</button>
          </div>
          <div class="botones-num">
              <button class="ColorGris" onclick="addToDisplay('1')">1</button>
              <button class="ColorGris" onclick="addToDisplay('2')">2</button>
              <button class="ColorGris" onclick="addToDisplay('3')">3</button>
              <button class="ColorNaranja" onclick="addToDisplay('+')">+</button>
          </div>
          <div class="botones-num">
              <button class="ColorGris cero" onclick="addToDisplay('0')">0</button>
              <button class="ColorGris punto" onclick="addToDisplay('.')">.</button>
              <button class="ColorNaranja" class="igual" onclick="calcular()">=</button>
          </div>
          
      </div>
  </div>
  
</div>

<script>

  // Cargar el historial desde el archivo JSON
function cargarHistorial() {
fetch('/views/calculator')  // Ruta al archivo JSON
  .then(response => response.json())
  .then(data => {
    // Manipula los datos y muestra el historial en tu interfaz de usuario
    const historial = data.historial;
    const historialContent = document.getElementById('historial-content');

    historialContent.innerHTML = ''; // Limpia el contenido anterior del historial

    historial.forEach(item => {
      const cuenta = item.cuenta;
      const resultado = item.resultado;
      historialContent.innerHTML += `${cuenta} = ${resultado}<br>`;
    });
  })
  .catch(error => {
    console.error('Error al cargar el historial:', error);
  });
}

// Llama a esta función cuando quieras cargar y mostrar el historial

function mostrarHistorial() {
const historialContent = document.getElementById('historial-content');

if (historialContent.style.display === 'none' || historialContent.innerHTML.trim() === '') {
  // El historial está oculto o vacío, mostrarlo
  fetch('/calculator')
    .then(response => response.json())
    .then(data => {
      if (data.historial && data.historial.length > 0) {
        historialContent.innerHTML = '';
        data.historial.forEach(item => {
          const cuenta = item.cuenta;
          const resultado = item.resultado;
          historialContent.innerHTML += `${cuenta} = ${resultado}<br>`;
        });
      } else {
        historialContent.innerHTML = 'El historial está vacío.';
      }
    })
    .catch(error => {
      console.error('Error al cargar el historial:', error);
    });
  historialContent.style.display = 'block'; // Mostrar el historial
} else {
  historialContent.innerHTML = ''; // Limpiar el contenido del historial
  historialContent.style.display = 'none'; // Ocultar el historial
}
}

let leftParenthesesCount = 0;  // Variable para rastrear la cantidad de paréntesis izquierdos agregados

function addParenthesesIzq() {
  const Parentheses= "(";
  const displayValue = document.getElementById("display");
  if (displayValue.value === "" && displayValue !== ".") {
      display.value = Parentheses
      leftParenthesesCount = 1;  
  } else {
      display.value += Parentheses
      leftParenthesesCount++;
  }
}

function addParenthesesDer() {
  const Parentheses= ")";
  const displayValue = document.getElementById("display");
  if (leftParenthesesCount > 0) {
      display.value += Parentheses
      leftParenthesesCount--;
  }
}
  function addToDisplay(value) {
      const display = document.getElementById("display");
      const lastChar = display.value.charAt(display.value.length - 1);
      if ("+-*/.".includes(lastChar) && "+-*/.".includes(value)) {
          return;
      }
  
      if (display.value === "0" && value !== ".") {
          display.value = value;
      } else {
          display.value += value;
      }
  }
  function DelDisplay() {
      const display = document.getElementById("display");
  }

 
  function calcular() {
  const display = document.getElementById("display");
  const registro = {
    cuenta: display.value,
    resultado: eval(display.value)
  };

  try {
    // Mostrar el resultado en la pantalla
    display.value = registro.resultado;

    // Realizar una solicitud POST al servidor para guardar el registro
    fetch('/data/HistorialUrl', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(registro)
})
  .then(response => {
    if (response.status === 200) {
      console.log('Registro guardado con éxito en el servidor');
    } else {
      console.error('Error al guardar el registro en el servidor');
    }
  })
  .catch(error => {
    console.error('Error en la solicitud POST:', error);
  });

  } catch {
    display.value = 'ERROR';
    DelDisplay();
  }
}

  function borrarDisplay() {
      document.getElementById("display").value = "";
  }
</script>
